SOME NOTES GIVEN BELOW
1. sudo apt update && sudo apt upgrade -y  
2. sudo apt install python3 python3-pip -y  
3. pip3 install cryptography pandas faker  
4. python3 --version  
5. pip3 list | grep -E "cryptography|pandas|faker" 
6. nano rsa_key.py
from cryptography.hazmat.primitives.asymmetric import rsa  
from cryptography.hazmat.primitives import serialization 
# Generate private key  
private_key = rsa.generate_private_key( 
  public_exponent=65537,  
  key_size=2048  
) 
with open("rsa_private.pem", "wb") as f:  
  f.write(private_key.private_bytes 
  (   
    encoding=serialization.Encoding.PEM, 
    format=serialization.PrivateFormat.TraditionalOpenSSL, 
    encryption_algorithm=serialization.NoEncryption()
  )
)
print("RSA key pair generated and saved.") 
7. python3 rsa_key.py 
8. nano rsa_encrypt.py 
from cryptography.hazmat.primitives.asymmetric import padding 
from cryptography.hazmat.primitives import hashes  
from cryptography.hazmat.primitives import serialization 
# Load the public key  
with open("rsa_public.pem", "rb") as f: 
  public_key = serialization.load_pem_public_key(f.read())  
# The message to encrypt  
message = b"Secure Data Transfer”

# Encrypt the message using RSA public key  
encrypted = public_key.encrypt 
(
  message,  
  padding.OAEP 
  (   
    mgf=padding.MGF1(algorithm=hashes.SHA256()), 
    algorithm=hashes.SHA256(),  
    label=None
  )
)
print(f"Encrypted Data: {encrypted}") 

9. python3 rsa_encrypt.py 

10. nano rsa_decrypt.py 
from cryptography.hazmat.primitives.asymmetric import padding  
from cryptography.hazmat.primitives import hashes  
from cryptography.hazmat.primitives import serialization 
# Load the private key  
with open("rsa_private.pem", "rb") as f:  
  private_key = serialization.load_pem_private_key(f.read(), password=None)  

#The encrypted message (use the result from rsa_encrypt.py) 
encrypted_message = b'ENCRYPTED_MESSAGE_HERE' # Replace with the actual encrypted 
message 
# Decrypt the message using RSA private key  
decrypted = private_key.decrypt
(  
  encrypted_message, 
  padding.OAEP
  (  
    mgf=padding.MGF1(algorithm=hashes.SHA256()), 
    algorithm=hashes.SHA256(),  
    label=None
  ) 
)  
print(f"Decrypted Data: {decrypted.decode()}")

11. python3 rsa_decrypt.py 

NOTES 
• When you are saving txt or py files after putting text/codes, to save first do Ctrl+O 
then press Enter and then Ctrl+X to exit 
• If you want to make changes to the txt or py file, simply run “nano filename” again
